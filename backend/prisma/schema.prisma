// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id              Int     @id @default(autoincrement())
  name            String
  description     String
  longDescription String?
  category        String
  badge           String
  isNew           Boolean @default(false)
  organic         Boolean @default(false)
  fastDelivery    Boolean @default(false)
  featured        Boolean @default(false)
  deactivated     Boolean @default(false)
  image           Json?
  images          Json[]

  features       String[]
  specifications Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  rating      Float @default(0.0) // Calculated average rating
  reviewCount Int   @default(0) // Total number of reviews

  defaultVariantId Int? @unique

  defaultVariant ProductVariant? @relation("DefaultVariant", fields: [defaultVariantId], references: [id], onDelete: SetNull)

  variants ProductVariant[]

  reviews Review[]

  @@map("products")
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  size     VariantSize
  price    Float
  oldPrice Float?
  discount Float?
  stock    Int     @default(0)
  sku      String? @unique

  orderItems OrderItem[]

  defaultForProduct Product? @relation("DefaultVariant")

  @@map("product_variants")
}
enum VariantSize {
  GM_250
  GM_500
  KG_1
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  role      String   @default("admin")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Review {
  id           Int     @id @default(autoincrement())
  reviewerName String
  reviewerEmail String?
  rating       Int
  comment      String?
  isVerified   Boolean @default(false)

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CREDIT_CARD
  DEBIT_CARD
  UPI
  NET_BANKING
  WALLET
}

model Order {
  id        String  @id @default(cuid())
  sessionId String?

  customerName    String
  customerEmail   String
  customerPhone   String
  shippingAddress Json

  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod @default(CASH_ON_DELIVERY)

  subtotal      Float
  totalDiscount Float @default(0)
  shippingCost  Float @default(0)
  finalTotal    Float

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  confirmedAt DateTime?
  shippedAt   DateTime?
  deliveredAt DateTime?
  cancelledAt DateTime?

  orderItems    OrderItem[]
  statusHistory OrderStatusHistory[]
  emailLogs     EmailLog[]

  notes         String?
  internalNotes String?

  @@map("orders")
}

model OrderItem {
  id               Int    @id @default(autoincrement())
  orderId          String
  productVariantId Int

  productName String
  price       Float
  oldPrice    Float?
  quantity    Int

  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [productVariantId], references: [id])

  @@map("order_items")
}

model OrderStatusHistory {
  id        Int         @id @default(autoincrement())
  orderId   String
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

model EmailLog {
  id          Int           @id @default(autoincrement())
  type        EmailType
  sender      String        @default("noreply@bandhuchai.com") // Sender email address
  recipient   String
  subject     String
  status      EmailStatus   @default(PENDING)
  messageId   String?       // Nodemailer message ID
  orderId     String?       // Optional link to order
  attempts    Int           @default(0)
  lastAttempt DateTime?
  sentAt      DateTime?
  failedAt    DateTime?
  errorMessage String?
  metadata    Json?         // Additional tracking data
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("email_logs")
}

enum EmailType {
  ORDER_CONFIRMATION
  ORDER_STATUS_UPDATE
  ORDER_CANCELLATION
  CONTACT_FORM
  NEWSLETTER
  MARKETING
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
  DELIVERED
  OPENED
  CLICKED
}
