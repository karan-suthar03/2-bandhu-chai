// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id              Int     @id @default(autoincrement())
  name            String
  price           Float
  oldPrice        Float?
  discount        Float?
  description     String
  longDescription String?
  category        String
  badge           String
  rating          Float   @default(0.0)
  stock           Int     @default(0)
  isNew           Boolean @default(false)
  organic         Boolean @default(false)
  fastDelivery    Boolean @default(false)
  featured        Boolean @default(false)
  deactivated     Boolean @default(false)
  image           Json?
  images          Json[]

  // Image Type are
  // small
  // medium
  // large
  // extraLarge

  features       String[]
  sizes          Json?
  specifications Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  orderItems OrderItem[]

  @@map("products")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CREDIT_CARD
  DEBIT_CARD
  UPI
  NET_BANKING
  WALLET
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  role      String   @default("admin")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Order {
  id          String  @id @default(cuid())
  sessionId   String?

  customerName  String
  customerEmail String
  customerPhone String

  shippingAddress Json

  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod @default(CASH_ON_DELIVERY)

  subtotal      Float
  totalDiscount Float @default(0)
  shippingCost  Float @default(0)
  tax           Float @default(0)
  finalTotal    Float

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  confirmedAt DateTime?
  shippedAt   DateTime?
  deliveredAt DateTime?
  cancelledAt DateTime?

  orderItems    OrderItem[]
  statusHistory OrderStatusHistory[]

  notes         String?
  internalNotes String?

  @@map("orders")
}

model OrderItem {
  id        Int    @id @default(autoincrement())
  orderId   String
  productId Int

  productName String
  price       Float
  oldPrice    Float?
  quantity    Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model OrderStatusHistory {
  id        Int         @id @default(autoincrement())
  orderId   String
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}
